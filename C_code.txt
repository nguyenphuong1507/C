#include<iostream>
using namespace std;
class Phuongsai
{
public:
	float X[100], P[100];
	int n;

public:
	Phuongsai() { n = 0; };
	bool find_index(float value);
	void nhapn();
	void nhapX();
	void nhapP();
	float Tong(int i);
	void xuat();
	float KyVongEX();
	float EX2();
	float PhuongSaiVX();
};



int main()
{
	Phuongsai m;
	m.nhapn();
	m.nhapX();
	m.nhapP();
	m.xuat();
	cout << "\nPhuong Sai VX = " << m.PhuongSaiVX() << endl;;



	system("pause");
	return 0;
}


bool Phuongsai::find_index(float value)
{
	for (int i = 0; i < n; i++)
	{
		if (X[i] == value)
		{
			return true;
		}
	}
	return false;
}


void Phuongsai::nhapn()
{
	cout << "\nNhap so bien ngau nhien X: ";
	cin >> n;
}
void Phuongsai::nhapX()
{
	
	int temp;
	for (int i = 1; i <= n; i++)
	{
		cout << "X" << i << " = ";
		cin >> temp;
		if (find_index(temp) == true)
		{
			cout << "\nGia tri bi trung vui long nhap lai" << endl;
			i--;
		}
		else
		{
			X[i] = temp;
		}
	}

}


void Phuongsai::nhapP()
{
	for (int i = 1; i <= n; i++)
	{
		if (i < n) {
			do
			{
				cout << "xac xuat tuong ung cua bnn X" << i << " la: P" << i << " = ";
				cin >> P[i];
			} while (P[i] >= 1 - Tong(i) || P[i] < 0);
		}
		else
			P[n] = 1 - Tong(n);
	}
}

float Phuongsai::Tong(int k)
{
	float TongXS = 0;
	for (int i = 1; i < k; i++)
	{
		TongXS += P[i];
	}
	return TongXS;
}


void Phuongsai::xuat()
{
	cout << "P[" << n << "] = " << P[n];
	cout << "\n|  X  |   ";
	for (int i = 1; i <= n; i++)
	{
		cout << X[i] << "     |   ";
	}

	cout << "\n|  P  |   ";
	for (int i = 1; i <= n; i++)
	{
		cout << P[i] << "   |   ";
	}

}

float Phuongsai::KyVongEX()
{
	float EX = 0;
	for (int i = 1; i <= n; i++)
	{
		EX += X[i] * P[i];
	}
	return EX;
}

float Phuongsai::EX2()
{
	float EXpb = 0;
	for (int i = 1; i <= n; i++)
	{
		EXpb += X[i] * X[i] * P[i];
	}
	return EXpb;
}

float Phuongsai::PhuongSaiVX()
{
	float PS = 0;
	PS = EX2() - KyVongEX()*KyVongEX();
	return PS;
}


